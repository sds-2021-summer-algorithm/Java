package P15684;

import java.io.*;
import java.util.*;

public class Main {
    static int N; // 세로선 수(사람 수)
    static int M; // 가로선 수
    static int H; // 높이
    static int ans = 4;
    static boolean [][] ladder;

    public static void main(String[] args) throws IOException{
        System.setIn(new FileInputStream("input.txt"));
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        H = Integer.parseInt(st.nextToken());

        if(M==0) {
            System.out.println(0);
            return;
        }

        ladder = new boolean [H+1][N+1];
        // 입력받기
        for(int i = 1 ; i<=M ; i++){
            st = new StringTokenizer(br.readLine());
            int x = Integer.parseInt(st.nextToken()); // 차례
            int y = Integer.parseInt(st.nextToken()); // 높이

            ladder[x][y] = true;
        }

        if(check()){
            System.out.println(0);
            return;
        }
        for(int i = 1 ; i <=H; i++){ // 높이
            for(int j = 1 ; j<N; j++){ // 가능한 가로선은 세로선의 수 -1
                if(ladder[i][j]) continue;
                if(j!=1 &&ladder[i][j-1] ) continue;
                if(j!=N-1 && ladder[i][j+1]) continue;

                // 설치되어 있지 않은 곳을 택하자
                // 양 옆에도 확인 필요
                DFS(i, j, 1);
            }
        }
        if(ans==4) System.out.println(-1);
        else System.out.println(ans);
        br.close();
    }
    // 다음에 추가해볼 가로선 위치, 현재까지 추가한 가로선 수
    private static void DFS(int x, int y, int count) {
        int i = x;
        int j = y-1;

        ladder[x][y] = true;                        // 체크인
        if(check()) {                               // 목적지 확인
            ans = Math.min(ans,count);                              // 종료필요
        }else{                                      // 다음 가로선
            if(count>=3) {
                ladder[x][y] = false;
                return;
            }
            while(true){
                j++;
                if(j>= N) {
                    j = 1;
                    i++;
                    if(i>H) break;
                }
                 if(!ladder[i][j] && count<3) {                // 비어있는곳
                     if(j!=1 &&ladder[i][j-1] ) continue;       // 양옆 확인
                     if(j!=N-1 && ladder[i][j+1]) continue;
                     DFS(i, j, count + 1);

                 }
            }
        }
        ladder[x][y] = false;                         // 체크아웃
    }

    // 전체 세로줄의 결과 확인
    private static boolean check(){
        for(int i = 1 ; i<=N ; i++){
            int result = down(i); // i번째 줄에서 시작한 결과
            if(i != result) return false;
        }
        return true;
    }
    // x번째 세로줄을 따라 내려오는 결과
    private static int down(int current){
        for(int h = 1; h <=H ; h++){
            if(current<N && ladder[h][current]){
                current += 1;
            }else if(current!=1 && ladder[h][current-1]){
                current -= 1;
            }
        }
        return current;
    }
}
